name: Run Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, dom, fileinfo, mysql, sqlite3
        coverage: xdebug

    - uses: actions/checkout@v3

    - name: Get Composer Cache Directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Cache npm dependencies
      uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-

    - name: Copy environment file
      run: cp .env.example .env

    - name: Install Composer dependencies
      run: composer install --no-interaction --prefer-dist

    - name: Generate application key
      run: php artisan key:generate

    - name: Install npm dependencies
      run: npm ci

    - name: Build assets
      run: npm run build

    - name: Create database
      run: |
        touch database/database.sqlite
        php artisan migrate --seed

    # Run all Livewire tests specifically
    - name: Run Livewire Tests
      run: php artisan test --filter=Livewire --testdox
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite

    # Run all feature tests (including Livewire)
    - name: Run Feature Tests
      run: php artisan test --testsuite=Feature --testdox
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite

    # Generate code coverage report
    - name: Generate code coverage report
      run: php artisan test --coverage-html coverage

    # Upload coverage report as artifact
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage/ 